Testando o docker
	docker container run hello-world

Verificando containers que estão em execução
	docker container ps

Listando todos os containers
	docker container ls -a

Verificando os containers que já foram executados
	docker container ps -a

Acessando o terminal do debian no modo interativo
	docker container run -it debian bash

RUN
	Este comando sempre criará um novo container, ou seja, se executarmos o comando acima
	e criarmo um arquivo txt em um diretório qualquer, ao executarmos o comando docker container run
	não existirá o arquivo txt criado anteriormente

Nomeando um container

	- Os containers precisam ter nomes únicos
	docker container run --name mydeb2 -it debian bash

Executando um container e removendo-o após a execução
	- docker container run -rm debian

Iniciando um container já existente
	Inciando um container já existente
	- start: irá iniciar um container já existente com todas as configurações
	e arquivos já criados dentro dele.
	- ai: inicia o container com o terminal atachado no modo interativo
	docker container start -ai mydeb2

Parando um container no Windows
	docker container stop NomeDoContainer

Executando um container e expondo um serviço através de uma porta
	- -p é o parâmetro de porta
	- 8080: é a porta na qual será exposto o serviço
	- 80: é a porta na qual o serviço irá rodar internamente dentro do container
	- docker container run -p 8080:80 nginx

Mapeando uma pasta do host para uma pasta do container
	- -v: indica o parâmetro de volume	-
	- C:\Users\Prosoft\repos\ex-volume: indica a pasta no host que se deseja mapear
	- /usr/share/nginx/html: indica a pasta no container que se deseja fazer o mapeamento
	docker container run -p 8080:80 -v C:\Users\Prosoft\repos\ex-volume:/usr/share/nginx/html nginx

Executando um container em modo background
	- -d: é a flag que indica que o container será executado no modo daemon(background)
	- docker container run -d --name ex-daemon-basic -p 8080:80 -v C:\Users\Prosoft\repos\ex-volume\html:/usr/share/nginx/html nginx

Exibindo os logs de um container em exibição
	- docker container logs ex-daemon-basic

Exbindo as informações sobre o container
	- docker container inspect ex-daemon-basic

Baixando uma image do docker hub
	- docker image pull redis:latest

Listando todas as imagens disponíveis localmente
	- docker image ls

Criando uma tag para uma imagem
	- será atribuído um novo nome para a mesma imagem
	- docker image tag redis:latest teste-redis

Excluindo uma imagem
	- docker image rm redis:latest

Excluindo uma imagem pela sua tag
	- docker image rm redis:latest teste-redis

Criando a primeira imagem

	Para se criar uma imagem do docker é necessário primeiro criar um arquivo dentro de um diretório chamado: Dockerfile
	Dentro do arquivo Dockerfile deve conter o descritos de como será composta esta imagem
	Exemplo: 
		FROM nginx:latest
		# grava o hello world em um arquivo chamado index.html
		RUN echo '<h1> Hello World!</h1>' > /usr/share/nginx/html/index.html

Buildando a imagem
	- -t: serve para indicar a tag a que esse build de imagem será associado
	- o ponto no final do comando serve para indicar que a imagem será buildada com base em um arquivo
	Dockerfile que se encontra no diretório atual
	docker image build -t ex-simple-build .

Buildando uma imagem com tag
	- ex-simple-build: nome de imagem já existente
	- diegocantelli19/simple-build: tag que será atribuída a imagem
	- docker image tag ex-simple-build diegocantelli19/simple-build

Buildando uma imagem com argumentos
	- 1 passo: buildar a imagem
		Exemplo: docker image build -t ex-build-arg .
	- 2 passo: Rodar o container baseado na imagem acima
		- 'echo $S3_BUCKET': Irá imprimir no console o valor default que está definido no dockerfile
		como para o argumento $S3_BUCKET
		Exemplo: docker container run ex-build-arg bash -c 'echo $S3_BUCKET'
	Dockerfile:
		FROM debian
		LABEL maintainer 'Testes docker'

		# define um argumento chamado S3_BUCKET
		ARG S3_BUCKET=files
		# set a variável de ambiente S3_BUCKET para o conteúdo que for definido no arg acima
		# caso o usuário não passe nenhum argumento, o valor do argumento será files
		ENV S3_BUCKET=${S3_BUCKET}

Buildando uma imagem passando argumentos dinamicamente
	- 1 passo: buildar a imagem
		- --build-arg: é a flag que indica que estamos passando um valor para o argumento definido na imagem
		Exemplo: docker image build --build-arg S3_BUCKET=myapp -t ex-build-arg .
	- 2 passo: Rodar o container baseado na imagem acima
		- 'echo $S3_BUCKET': Irá imprimir no console o valor default que está definido no dockerfile
		como para o argumento $S3_BUCKET
		Exemplo: docker container run ex-build-arg bash -c 'echo $S3_BUCKET'
	Dockerfile:
		FROM debian
		LABEL maintainer 'Testes docker'

		# define um argumento chamado S3_BUCKET
		ARG S3_BUCKET=files
		# set a variável de ambiente S3_BUCKET para o conteúdo que for definido no arg acima
		# caso o usuário não passe nenhum argumento, o valor do argumento será files
		ENV S3_BUCKET=${S3_BUCKET}


Copiando arquivos do host para o container
	Dockerfile:
		FROM nginx:latest
		LABEL mainteiner 'Copiando arquivos'

		RUN echo '<h1>Sem conteúdo</h1>' > /usr/share/nginx/html/conteudo.html
		# copia todos os arquivos com extensão .html para o diretório especificado
		COPY *.html /usr/share/nginx/html/

	- Build
		docker image build -t ex-build-copy
	- Run
		docker container run -p 8080:80 ex-build-copy



Subindo um servidor web rodando python
	Dockerfile
		FROM python:3.6
		LABEL maintaner 'Testes docker'

		# && -> concatena os comandos
		# \ -> quebra a linha entre os comandos
		RUN useradd www && \
			mkdir /app && \
			mkdir /log && \
    			chown www /log

		# definindo o usuário que estará logado no momento em que os processos forem executados dentro do container
		USER www

		# cria um volume compartilhado
		VOLUME /log

		# indica qual é o diretório em que comandos como add, run, copy e etc deverão ser executados
		WORKDIR /app

		# define a porta que este container irá estar ao executar
		EXPOSE 8000

		# configura o processo que deverá ser executado, no caso o python, pois é necessário dele para podermos executar
		# o script run.py
		ENTRYPOINT ["/usr/local/bin/python"]

		# na máquina host será executado este script
		CMD [ "run.py" ]

Efetuando login no docker HUB
	- docker login --username=diegocantelli19

Enviando uma imagem local para o docker HUB
	- docker image push <usuarioNoDockerHub>/simple-build:1.0

Criando uma nova rede no docker
	- docker network create --driver bridge rede_nova

Inspecionando uma rede
	- docker network inspect nome_rede

Executando um container para rodar sobre uma rede específica
	docker container run -d --name container3 --net nome_red alpine sleep 1000


Disconectando uma interface de rede do container
	docker network disconnect bridge container3


Criando um arquivo docker-compose.yml
	Exemplo:
	version: '3'
		services: 
    		# este será o serviço que sérá exposto para servir de conexão ao bd no arquivo app.js
    			db:
        			image: mongo:3.4
    			backend:
        			image: node:8.l
        			# mapeando a pasta backend do host com a pasta backend do container
        			volumes: 
            				- ./backend:/backend
        			ports:
            				- 3000:3000
        			# muda para a pasta backend, instala as dependências do package.json e executa o app.js
        			command: bash -c "cd /backend && npm i && node app"
    			frontend:
        			image: nginx:1.13
        			volumes:
            				- ./frontend:/usr/share/nginx/html/
        			ports:
            				- 80:80


Criando e inicializando os serviços definidos no arquivo docker compose
	- Na pasta em estiver o arquivo .yml executar o comando abaixo
		- docker-compose up

Criando e inicializando os serviços definidos no arquivo docker compose no modo daemon
	- docker-compose -d